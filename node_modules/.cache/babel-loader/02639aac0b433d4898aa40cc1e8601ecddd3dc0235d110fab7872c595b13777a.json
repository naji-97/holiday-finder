{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchCountry = createAsyncThunk('countries/fetchCountry', async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    const data = await response.json();\n    return data.map(country => ({\n      continent: country.continents[0],\n      name: country.name.common,\n      capital: Array.isArray(country.capital) ? country.capital[0] : String(country.capital),\n      population: country.population,\n      currencies: country.currencies,\n      countryCode: country.cca2,\n      flagSvg: country.flags.svg,\n      flagAlt: country.flags.alt,\n      flagPng: country.flags.png,\n      timezones: country.timezones\n    }));\n  } catch (error) {\n    throw new Error('Failed to fetch countries.');\n  }\n});\nconst countrySlice = createSlice({\n  name: 'countries',\n  initialState: {\n    countries: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchCountry.pending, state => ({\n      ...state,\n      status: 'loading',\n      error: null\n    })).addCase(fetchCountry.fulfilled, (state, action) => ({\n      ...state,\n      status: 'success',\n      countries: action.payload\n    })).addCase(fetchCountry.rejected, (state, action) => ({\n      ...state,\n      status: 'error',\n      error: action.error.message\n    }));\n  }\n});\nexport default countrySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchCountry","response","fetch","data","json","map","country","continent","continents","name","common","capital","Array","isArray","String","population","currencies","countryCode","cca2","flagSvg","flags","svg","flagAlt","alt","flagPng","png","timezones","error","Error","countrySlice","initialState","countries","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["D:/miccrovers/module-4/holiday-finder/src/state/countryReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchCountry = createAsyncThunk('countries/fetchCountry', async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    const data = await response.json();\n    return data.map((country) => ({\n      continent: country.continents[0],\n      name: country.name.common,\n      capital: Array.isArray(country.capital) ? country.capital[0] : String(country.capital),\n      population: country.population,\n      currencies: country.currencies,\n      countryCode: country.cca2,\n      flagSvg: country.flags.svg,\n      flagAlt: country.flags.alt,\n      flagPng: country.flags.png,\n      timezones: country.timezones,\n    }));\n  } catch (error) {\n    throw new Error('Failed to fetch countries.');\n  }\n});\n\nconst countrySlice = createSlice({\n  name: 'countries',\n  initialState: {\n    countries: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {},\n  extraReducers(builder) {\n    builder\n      .addCase(fetchCountry.pending, (state) => ({\n        ...state,\n        status: 'loading',\n        error: null,\n      }))\n      .addCase(fetchCountry.fulfilled, (state, action) => ({\n        ...state,\n        status: 'success',\n        countries: action.payload,\n      }))\n      .addCase(fetchCountry.rejected, (state, action) => ({\n        ...state,\n        status: 'error',\n        error: action.error.message,\n      }));\n  },\n});\n\nexport default countrySlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,YAAY,GAAGD,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EACjF,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;IAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,GAAG,CAAEC,OAAO,KAAM;MAC5BC,SAAS,EAAED,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC;MAChCC,IAAI,EAAEH,OAAO,CAACG,IAAI,CAACC,MAAM;MACzBC,OAAO,EAAEC,KAAK,CAACC,OAAO,CAACP,OAAO,CAACK,OAAO,CAAC,GAAGL,OAAO,CAACK,OAAO,CAAC,CAAC,CAAC,GAAGG,MAAM,CAACR,OAAO,CAACK,OAAO,CAAC;MACtFI,UAAU,EAAET,OAAO,CAACS,UAAU;MAC9BC,UAAU,EAAEV,OAAO,CAACU,UAAU;MAC9BC,WAAW,EAAEX,OAAO,CAACY,IAAI;MACzBC,OAAO,EAAEb,OAAO,CAACc,KAAK,CAACC,GAAG;MAC1BC,OAAO,EAAEhB,OAAO,CAACc,KAAK,CAACG,GAAG;MAC1BC,OAAO,EAAElB,OAAO,CAACc,KAAK,CAACK,GAAG;MAC1BC,SAAS,EAAEpB,OAAO,CAACoB;IACrB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG/B,WAAW,CAAC;EAC/BW,IAAI,EAAE,WAAW;EACjBqB,YAAY,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,MAAM,EAAE,MAAM;IACdL,KAAK,EAAE;EACT,CAAC;EACDM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAACpC,YAAY,CAACqC,OAAO,EAAGC,KAAK,KAAM;MACzC,GAAGA,KAAK;MACRN,MAAM,EAAE,SAAS;MACjBL,KAAK,EAAE;IACT,CAAC,CAAC,CAAC,CACFS,OAAO,CAACpC,YAAY,CAACuC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,MAAM;MACnD,GAAGF,KAAK;MACRN,MAAM,EAAE,SAAS;MACjBD,SAAS,EAAES,MAAM,CAACC;IACpB,CAAC,CAAC,CAAC,CACFL,OAAO,CAACpC,YAAY,CAAC0C,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,MAAM;MAClD,GAAGF,KAAK;MACRN,MAAM,EAAE,OAAO;MACfL,KAAK,EAAEa,MAAM,CAACb,KAAK,CAACgB;IACtB,CAAC,CAAC,CAAC;EACP;AACF,CAAC,CAAC;AAEF,eAAed,YAAY,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}