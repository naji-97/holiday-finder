{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// const fetchCountryAsync = async () => {\n//   const response = await fetch(`https://restcountries.com/v3.1/all`);\n//   const data = await response.json();\n//   return data;\n// };\n\nexport const fetchCountry = createAsyncThunk('countries/fetchCountry', async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    const data = await response.json();\n    return data.map(country => ({\n      continent: country.continents[0],\n      name: country.name.common,\n      capital: country.capital,\n      population: country.population,\n      currencies: country.currencies,\n      countryCode: country.cca2,\n      flagSvg: country.flags.svg,\n      flagAlt: country.flags.alt,\n      flagPng: country.flags.png,\n      timezones: country.timezones\n    }));\n  } catch (error) {\n    throw new Error('Failed to fetch countries.');\n  }\n});\nconst countrySlice = createSlice({\n  name: 'countries',\n  initialState: {\n    countries: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // setCountry: (state, action) => {\n    //   state.countries = action.payload;\n    // },\n  },\n  extraReducers(builder) {\n    builder.addCase('countries/fetchCountry/pending', state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase('countries/fetchCountry/fulfilled', (state, action) => {\n      // console.log(action.payload);\n      state.status = 'success';\n      state.countries = action.payload;\n    }).addCase('countries/fetchCountry/rejected', (state, action) => {\n      state.status = 'error';\n      state.error = action.error.message;\n    });\n  }\n});\n\n// export const { setCountry } = countrySlice.actions;\nexport default countrySlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchCountry","response","fetch","data","json","map","country","continent","continents","name","common","capital","population","currencies","countryCode","cca2","flagSvg","flags","svg","flagAlt","alt","flagPng","png","timezones","error","Error","countrySlice","initialState","countries","status","reducers","extraReducers","builder","addCase","state","action","payload","message","reducer"],"sources":["D:/miccrovers/module-4/holiday-finder/src/state/countryReducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// const fetchCountryAsync = async () => {\n//   const response = await fetch(`https://restcountries.com/v3.1/all`);\n//   const data = await response.json();\n//   return data;\n// };\n\nexport const fetchCountry = createAsyncThunk('countries/fetchCountry', async () => {\n  try {\n    const response = await fetch('https://restcountries.com/v3.1/all');\n    const data = await response.json();\n    return data.map((country) => ({\n      continent: country.continents[0],\n      name: country.name.common,\n      capital: country.capital,\n      population: country.population,\n      currencies: country.currencies,\n      countryCode: country.cca2,\n      flagSvg: country.flags.svg,\n      flagAlt: country.flags.alt,\n      flagPng: country.flags.png,\n      timezones: country.timezones,\n    }));\n  } catch (error) {\n    throw new Error('Failed to fetch countries.');\n  }\n});\n\nconst countrySlice = createSlice({\n  name: 'countries',\n  initialState: {\n    countries: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    // setCountry: (state, action) => {\n    //   state.countries = action.payload;\n    // },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase('countries/fetchCountry/pending', (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase('countries/fetchCountry/fulfilled', (state, action) => {\n        // console.log(action.payload);\n        state.status = 'success';\n        state.countries = action.payload;\n      })\n      .addCase('countries/fetchCountry/rejected', (state, action) => {\n        state.status = 'error';\n        state.error = action.error.message;\n      });\n  },\n\n});\n\n// export const { setCountry } = countrySlice.actions;\nexport default countrySlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGD,gBAAgB,CAAC,wBAAwB,EAAE,YAAY;EACjF,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;IAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,GAAG,CAAEC,OAAO,KAAM;MAC5BC,SAAS,EAAED,OAAO,CAACE,UAAU,CAAC,CAAC,CAAC;MAChCC,IAAI,EAAEH,OAAO,CAACG,IAAI,CAACC,MAAM;MACzBC,OAAO,EAAEL,OAAO,CAACK,OAAO;MACxBC,UAAU,EAAEN,OAAO,CAACM,UAAU;MAC9BC,UAAU,EAAEP,OAAO,CAACO,UAAU;MAC9BC,WAAW,EAAER,OAAO,CAACS,IAAI;MACzBC,OAAO,EAAEV,OAAO,CAACW,KAAK,CAACC,GAAG;MAC1BC,OAAO,EAAEb,OAAO,CAACW,KAAK,CAACG,GAAG;MAC1BC,OAAO,EAAEf,OAAO,CAACW,KAAK,CAACK,GAAG;MAC1BC,SAAS,EAAEjB,OAAO,CAACiB;IACrB,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG5B,WAAW,CAAC;EAC/BW,IAAI,EAAE,WAAW;EACjBkB,YAAY,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,MAAM,EAAE,MAAM;IACdL,KAAK,EAAE;EACT,CAAC;EACDM,QAAQ,EAAE;IACR;IACA;IACA;EAAA,CACD;EACDC,aAAaA,CAACC,OAAO,EAAE;IACrBA,OAAO,CACJC,OAAO,CAAC,gCAAgC,EAAGC,KAAK,IAAK;MACpDA,KAAK,CAACL,MAAM,GAAG,SAAS;MACxBK,KAAK,CAACV,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDS,OAAO,CAAC,kCAAkC,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9D;MACAD,KAAK,CAACL,MAAM,GAAG,SAAS;MACxBK,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDH,OAAO,CAAC,iCAAiC,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7DD,KAAK,CAACL,MAAM,GAAG,OAAO;MACtBK,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACX,KAAK,CAACa,OAAO;IACpC,CAAC,CAAC;EACN;AAEF,CAAC,CAAC;;AAEF;AACA,eAAeX,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}